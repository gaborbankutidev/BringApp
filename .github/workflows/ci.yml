name: CI

on:
    push:
        branches:
            - master

concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: false

permissions:
    contents: write
    pull-requests: write

jobs:
    checks_and_build:
        name: Checks and Build
        if: |
            github.ref == 'refs/heads/master' && !(
              github.event_name == 'push' &&
              contains(github.event.head_commit.message, '[Deploy Bot]')
            )

        runs-on: ubuntu-latest
        steps:
            - name: Checkout files
              uses: actions/checkout@v4
              with:
                  ref: ${{github.event.pull_request.head.sha}}
                  fetch-depth: 0

            - name: Enable Corepack
              run: corepack enable

            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "yarn"

            - name: Install dependencies
              run: yarn install --immutable

            - name: Run typecheck
              run: yarn types

            - name: Run lint
              run: yarn lint

            - name: Run build
              run: yarn build

            - name: Run tests
              run: yarn test

            - name: Run changeset check
              run: yarn changeset status --since origin/master

    release:
        name: Release
        needs: checks_and_build
        if: |
            github.ref == 'refs/heads/master' && !(
              github.event_name == 'push' &&
              contains(github.event.head_commit.message, '[Deploy Bot]')
            )

        runs-on: ubuntu-latest
        steps:
            - name: Checkout files
              uses: actions/checkout@v4

            - name: Enable Corepack
              run: corepack enable

            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "yarn"

            - name: Install dependencies
              run: yarn install --immutable

            - name: Creating .npmrc
              run: |
                  cat << EOF > "$HOME/.npmrc"
                    //registry.npmjs.org/:_authToken=$NPM_TOKEN
                  EOF
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Publish NPM Packages
              run: yarn release

            - name: Validate Composer JSON
              run: composer validate --strict --working-dir=packages/blocks-wp

            - name: Set up Git
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git config --global url."https://x-access-token:$PAT_TOKEN@github.com/".insteadOf "https://github.com/"
              env:
                  PAT_TOKEN: ${{ secrets.DEPLOY_BOT_TOKEN }}

            - name: Clone blocks-wp repository, get latest tag
              run: |
                  git clone $BLOCKS_WP_REPOSITORY_URL blocks-wp-target
                  cd blocks-wp-target
                  git fetch --tags
                  LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
                  echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
              env:
                  BLOCKS_WP_REPOSITORY_URL: ${{ vars.BLOCKS_WP_REPOSITORY_URL }}

            - name: Check if blocks-wp package needs to be updated
              run: |
                  VERSION=$(jq -r .version packages/blocks-wp/package.json)
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  if [ "$LATEST_TAG" != "$VERSION" ]; then
                    echo "VERSION_CHANGED=true" >> $GITHUB_ENV
                  else
                    echo "VERSION_CHANGED=false" >> $GITHUB_ENV
                  fi
              env:
                  LATEST_TAG: ${{ env.LATEST_TAG }}

            - name: Commit blocks-wp package update, add new version tag
              if: env.VERSION_CHANGED == 'true'
              run: |
                  # Sync the blocks-wp package to the target repository
                  rsync -av --delete --exclude='.git' packages/blocks-wp/ blocks-wp-target/
                  cd blocks-wp-target

                  # Get new version
                  VERSION=$(jq -r .version ../packages/blocks-wp/package.json)

                  # Add, commit, and push changes
                  git add .
                  git commit -m "[Deploy Bot] Update package - $VERSION"
                  git push origin master

                  # Tag new version
                  git tag "$VERSION"
                  git push origin --tags

            - name: Notify Packagist
              if: env.VERSION_CHANGED == 'true'
              run: |
                  curl -XPOST -H'content-type:application/json' 'https://packagist.org/api/update-package?username=Bring&apiToken=$PACKAGIST_TOKEN' \
                  -d'{"repository":{"url":"$BLOCKS_WP_REPOSITORY_URL"}}'
              env:
                  PACKAGIST_TOKEN: ${{ secrets.PACKAGIST_TOKEN }}
                  BLOCKS_WP_REPOSITORY_URL: ${{ vars.BLOCKS_WP_REPOSITORY_URL }}

            - name: Clean up temporary folders
              run: rm -rf blocks-wp-target

            - name: Format code
              run: |
                  if ! git diff-index --quiet HEAD; then
                    yarn format
                  else
                    echo "No code changes detected."
                  fi

            - name: Create pull request for Package Versioning
              run: |
                  if ! git diff-index --quiet HEAD; then
                    git checkout -b ci-deploy
                    git add .
                    git commit -m "[Deploy Bot] Version Packages"
                    git push origin ci-deploy

                    PR_URL=$(gh pr create --title "[Deploy Bot] Version Packages" --body "Automated package versioning via GitHub Actions" --head ci-deploy --base master)
                    echo "Created PR: $PR_URL"

                    PR_NUMBER=$(gh pr list --head ci-deploy --json number --jq '.[0].number')
                    echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
                  else
                    echo "No package version changes detected."
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Merge pull request
              if: env.PR_NUMBER != ''
              run: |
                  gh pr merge ${{ env.PR_NUMBER }} --squash --admin
                  git push origin --delete ci-deploy
              env:
                  GH_TOKEN: ${{ secrets.DEPLOY_BOT_TOKEN }}
